[[rules]]
name = "remove_flag_usage"
query = """(
(call_expression 
    (navigation_expression
        (navigation_suffix 
            (simple_identifier)@m_name
        ) 
    )
) @call_expression
(#eq? @m_name "@flag_checker_method_name")
)"""
replace_node = "call_expression"
replace = "@treated"
groups = [ "replace_expression_with_boolean_literal"]
holes = ["treated", "flag_checker_method_name"]


[[rules]]
name = "deleting_flag_checker_declaration"
query = """(
(function_declaration
    (simple_identifier) @function_name
    (function_body
        (statements
	        (jump_expression 
                (
                    (call_expression 
                        (simple_identifier) @m_name
                        (call_suffix 
                            (value_arguments
                                (value_argument (_)@flag_name)
                            )@args
                        )
                    ) @call_expression
                )
            ) @jump_expression
        )
    ) @fb
)@fd
(#eq? @m_name "@method_name")
(#eq? @flag_name "\\\"@stale_flag_name\\\"")
)"""
replace_node = "fd"
replace = ""
holes = ["stale_flag_name", "method_name"]

[[rules]]
name = "delete_file_with_no_declarations"
query = """
(source_file) @source_file"""
replace = ""
replace_node = "program"
[[rules.constraints]]
matcher = "(source_file) @sf"
queries = ["(class_declaration) @cd", "(object_declaration) @od", "(function_declaration) @fd", "(property_declaration) @pd"]

[[rules]]
name = "remove_flag_check"
query = """(
(call_expression 
  (simple_identifier) @m_name
  (call_suffix 
    (value_arguments
        (value_argument (_)@flag_name)
    )@args
  )
) @call_expression
(#eq? @m_name "@method_name")
(#eq? @flag_name "\\\"@stale_flag_name\\\"")
)"""
replace_node = "call_expression"
replace = "@treated"
holes = ["treated","stale_flag_name", "method_name"]
groups = ["replace_expression_with_boolean_literal"]